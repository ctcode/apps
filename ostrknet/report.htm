<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>ostrknet</title>
<link rel="icon" href="satos.png">
<link rel="stylesheet" href="https://labs.os.uk/public/os-api-branding/v0.2.0/os-api-branding.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<style>
body {
	background-color: darkolivegreen;
}
#reportbox {
	margin: 1em;
	background-color: hsl(42.3, 67%, 57.3%);
	background-color: hsl(0,0%,80%);
	padding: 1em;
	border-radius: 0.5em;
}
#reportdesc {
	margin-bottom: 0.5em;
	font-size: 2em;
}
#reportreq {
	font: status-bar;
	white-space: pre;
	overflow: auto;
}
#map {
	height: 30em;
	margin: 1em;
	font-size: inherit;
	border-radius: 0.5em;
}
@media only screen and (orientation: landscape) {
	body {
		display: flex;
	}
	#reportbox {
		flex-grow: 1;
	}
	#map {
		width: 30em;
		flex-shrink: 0;
	}
}
</style>
</head>
<body>

<div id="reportbox">
	<div id="reportdesc"></div>
	<div id="reportreq"></div>
</div>
<div id="map"></div>

<script src="https://labs.os.uk/public/os-api-branding/v0.2.0/os-api-branding.js"></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.3.1/leaflet-omnivore.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4leaflet/1.0.2/proj4leaflet.min.js"></script>

<script>
	if (!localStorage.trkneturl)
		localStorage.trkneturl = prompt("trknet url");

	var rep = reqReport();
	
	if (rep.seq) {
		document.getElementById("reportdesc").textContent = "#" + rep.seq + " : " + rep.day + "-" + rep.hour;
		document.getElementById("reportdesc").style.color = rep.ontime ? "green" : "red";
	}

	document.getElementById("reportreq").textContent = "" + rep.status + '\n' + rep.response;
	
	if (rep.gps)
		initMap(rep.gps);

	function reqReport() {
		xhr = new XMLHttpRequest();
		xhr.open("GET", localStorage.trkneturl, false);
		xhr.send();
	
		var repinfo = {status: xhr.status, response: xhr.response};
		
		if (xhr.status == 200) {
			var csv = xhr.response.split(',');

			if (csv.length >= 6)
			if (csv[3] == 'N')
			if (csv[5] == 'W') {
				repinfo.gps = {};
				repinfo.gps.lat = parseFloat(csv[2])
				repinfo.gps.lng = parseFloat(csv[4])
			}

			if (csv.length >= 18)
			if (csv[17] == 'T') {
				repinfo.day = csv[15];
				repinfo.hour = csv[16];
			}

			if (csv.length >= 20)
			if (csv[19] == 'X')
				repinfo.seq = parseInt(csv[18]);

			var now = new Date();
			if (now.getDate() == repinfo.day) {
				let h = now.getHours();
				let scheduled = h<8?0: h<12?8: h<16?12: h<20?16: 20;
				
				if (repinfo.hour == scheduled)
					repinfo.ontime = true;
			}
		}

		return repinfo;
	}

	function initMap(gpsloc) {
		if (!localStorage.osKey)
			localStorage.osKey = prompt("API Key") + "M9p4cJwEuF7ooC7IrmS8Nn0iAY1Ix";

		//var serviceUrl = 'https://api.os.uk/maps/raster/v1/zxy';
		var serviceUrl = 'https://api.os.uk/maps/raster/v1/wmts';

		// Setup the EPSG:27700 (British National Grid) projection.
		var crs = new L.Proj.CRS('EPSG:27700', '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs', {
		    resolutions: [ 896.0, 448.0, 224.0, 112.0, 56.0, 28.0, 14.0, 7.0, 3.5, 1.75 ],
		    origin: [ -238375.0, 1376256.0 ]
		});

		// Define parameters object.
		var params = {
		    key: localStorage.osKey,
		    service: 'WMTS',
		    request: 'GetTile',
		    version: '2.0.0',
		    height: 256,
		    width: 256,
		    outputFormat: 'image/png',
		    style: 'default',
		    layer: 'Leisure_27700',
		    tileMatrixSet: 'EPSG:27700',
		    tileMatrix: '{z}',
		    tileRow: '{y}',
		    tileCol: '{x}'
		};

		// Construct query string parameters from object.
		var queryString = Object.keys(params).map(function(key) {
		    return key + '=' + params[key];
		}).join('&');

		// Initialize the map.
		var mapOptions = {
		    crs: crs,
		    minZoom: 0,
		    maxZoom: 9,
		    center: gpsloc,
		    zoom: 8,
		    attributionControl: false
		};

		var map = L.map('map', mapOptions);

		// Load and display WMTS tile layer on the map.
		var basemap = L.tileLayer(serviceUrl + '?' + queryString).addTo(map);

		// Add marker.
		L.marker(mapOptions.center, { icon: getIcon('blue') }).addTo(map);

	/*
		function parseNMEA(txt) {
			// #2,223056.000,0053.4246,N,-0002.3142,W,
			var csv = txt.split(',');
			if (csv.length < 5) return null;

			return {lng: parseFloat(csv[4]), lat: parseFloat(csv[2])};
		}
	*/

		 // Returns a custom icon to provide when creating a marker.
		 // Reference: https://github.com/pointhi/leaflet-color-markers
		function getIcon(color) {
		    return new L.Icon({
		        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-' + color + '.png',
		        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.6.0/images/marker-shadow.png',
		        iconSize: [ 25, 41 ],
		        iconAnchor: [ 12, 41 ],
		        popupAnchor: [ 1, -34 ],
		        shadowSize: [ 41, 41 ]
		    });
		}
	}
</script>
</body>
</html>
